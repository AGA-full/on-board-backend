/*
 * This file is generated by jOOQ.
 */
package com.aga.onboard.tables


import com.aga.onboard.Public
import com.aga.onboard.keys.WORKER_PKEY
import com.aga.onboard.tables.records.WorkerRecord

import java.util.UUID
import java.util.function.Function

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * Информация о сотрудниках
 */
@Suppress("UNCHECKED_CAST")
open class Worker(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, WorkerRecord>?,
    aliased: Table<WorkerRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<WorkerRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("Информация о сотрудниках"),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.worker</code>
         */
        val WORKER: Worker = Worker()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<WorkerRecord> = WorkerRecord::class.java

    /**
     * The column <code>public.worker.id</code>. Идентификатор сотрудника
     */
    val ID: TableField<WorkerRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "Идентификатор сотрудника")

    /**
     * The column <code>public.worker.username</code>. Идентификатор
     * пользователя
     */
    val USERNAME: TableField<WorkerRecord, String?> = createField(DSL.name("username"), SQLDataType.VARCHAR(50).nullable(false), this, "Идентификатор пользователя")

    /**
     * The column <code>public.worker.company_id</code>. Компания пользователя
     */
    val COMPANY_ID: TableField<WorkerRecord, UUID?> = createField(DSL.name("company_id"), SQLDataType.UUID.nullable(false), this, "Компания пользователя")

    /**
     * The column <code>public.worker.password</code>. Пароль
     */
    val PASSWORD: TableField<WorkerRecord, String?> = createField(DSL.name("password"), SQLDataType.VARCHAR(50).nullable(false), this, "Пароль")

    /**
     * The column <code>public.worker.name</code>. Имя сотрудника
     */
    val NAME: TableField<WorkerRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(30).nullable(false), this, "Имя сотрудника")

    /**
     * The column <code>public.worker.team_id</code>. Команда сотрудника внутри
     * компании
     */
    val TEAM_ID: TableField<WorkerRecord, UUID?> = createField(DSL.name("team_id"), SQLDataType.UUID.nullable(false), this, "Команда сотрудника внутри компании")

    /**
     * The column <code>public.worker.head_id</code>. Непосредственный
     * руководитель
     */
    val HEAD_ID: TableField<WorkerRecord, UUID?> = createField(DSL.name("head_id"), SQLDataType.UUID, this, "Непосредственный руководитель")

    /**
     * The column <code>public.worker.hr_id</code>. HR сотрудника
     */
    val HR_ID: TableField<WorkerRecord, UUID?> = createField(DSL.name("hr_id"), SQLDataType.UUID, this, "HR сотрудника")

    private constructor(alias: Name, aliased: Table<WorkerRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<WorkerRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.worker</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.worker</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.worker</code> table reference
     */
    constructor(): this(DSL.name("worker"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, WorkerRecord>): this(Internal.createPathAlias(child, key), child, key, WORKER, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<WorkerRecord> = WORKER_PKEY
    override fun `as`(alias: String): Worker = Worker(DSL.name(alias), this)
    override fun `as`(alias: Name): Worker = Worker(alias, this)
    override fun `as`(alias: Table<*>): Worker = Worker(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Worker = Worker(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Worker = Worker(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Worker = Worker(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<UUID?, String?, UUID?, String?, String?, UUID?, UUID?, UUID?> = super.fieldsRow() as Row8<UUID?, String?, UUID?, String?, String?, UUID?, UUID?, UUID?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UUID?, String?, UUID?, String?, String?, UUID?, UUID?, UUID?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UUID?, String?, UUID?, String?, String?, UUID?, UUID?, UUID?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
