/*
 * This file is generated by jOOQ.
 */
package com.aga.onboard.tables.records


import com.aga.onboard.tables.Worker

import java.util.UUID

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl


/**
 * Информация о сотрудниках
 */
@Suppress("UNCHECKED_CAST")
open class WorkerRecord() : UpdatableRecordImpl<WorkerRecord>(Worker.WORKER), Record8<UUID?, String?, UUID?, String?, String?, UUID?, UUID?, UUID?> {

    open var id: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var username: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var companyId: UUID?
        set(value): Unit = set(2, value)
        get(): UUID? = get(2) as UUID?

    open var password: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var name: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var teamId: UUID?
        set(value): Unit = set(5, value)
        get(): UUID? = get(5) as UUID?

    open var headId: UUID?
        set(value): Unit = set(6, value)
        get(): UUID? = get(6) as UUID?

    open var hrId: UUID?
        set(value): Unit = set(7, value)
        get(): UUID? = get(7) as UUID?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<UUID?, String?, UUID?, String?, String?, UUID?, UUID?, UUID?> = super.fieldsRow() as Row8<UUID?, String?, UUID?, String?, String?, UUID?, UUID?, UUID?>
    override fun valuesRow(): Row8<UUID?, String?, UUID?, String?, String?, UUID?, UUID?, UUID?> = super.valuesRow() as Row8<UUID?, String?, UUID?, String?, String?, UUID?, UUID?, UUID?>
    override fun field1(): Field<UUID?> = Worker.WORKER.ID
    override fun field2(): Field<String?> = Worker.WORKER.USERNAME
    override fun field3(): Field<UUID?> = Worker.WORKER.COMPANY_ID
    override fun field4(): Field<String?> = Worker.WORKER.PASSWORD
    override fun field5(): Field<String?> = Worker.WORKER.NAME
    override fun field6(): Field<UUID?> = Worker.WORKER.TEAM_ID
    override fun field7(): Field<UUID?> = Worker.WORKER.HEAD_ID
    override fun field8(): Field<UUID?> = Worker.WORKER.HR_ID
    override fun component1(): UUID? = id
    override fun component2(): String? = username
    override fun component3(): UUID? = companyId
    override fun component4(): String? = password
    override fun component5(): String? = name
    override fun component6(): UUID? = teamId
    override fun component7(): UUID? = headId
    override fun component8(): UUID? = hrId
    override fun value1(): UUID? = id
    override fun value2(): String? = username
    override fun value3(): UUID? = companyId
    override fun value4(): String? = password
    override fun value5(): String? = name
    override fun value6(): UUID? = teamId
    override fun value7(): UUID? = headId
    override fun value8(): UUID? = hrId

    override fun value1(value: UUID?): WorkerRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): WorkerRecord {
        set(1, value)
        return this
    }

    override fun value3(value: UUID?): WorkerRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): WorkerRecord {
        set(3, value)
        return this
    }

    override fun value5(value: String?): WorkerRecord {
        set(4, value)
        return this
    }

    override fun value6(value: UUID?): WorkerRecord {
        set(5, value)
        return this
    }

    override fun value7(value: UUID?): WorkerRecord {
        set(6, value)
        return this
    }

    override fun value8(value: UUID?): WorkerRecord {
        set(7, value)
        return this
    }

    override fun values(value1: UUID?, value2: String?, value3: UUID?, value4: String?, value5: String?, value6: UUID?, value7: UUID?, value8: UUID?): WorkerRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised WorkerRecord
     */
    constructor(id: UUID? = null, username: String? = null, companyId: UUID? = null, password: String? = null, name: String? = null, teamId: UUID? = null, headId: UUID? = null, hrId: UUID? = null): this() {
        this.id = id
        this.username = username
        this.companyId = companyId
        this.password = password
        this.name = name
        this.teamId = teamId
        this.headId = headId
        this.hrId = hrId
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised WorkerRecord
     */
    constructor(value: com.aga.onboard.tables.pojos.Worker?): this() {
        if (value != null) {
            this.id = value.id
            this.username = value.username
            this.companyId = value.companyId
            this.password = value.password
            this.name = value.name
            this.teamId = value.teamId
            this.headId = value.headId
            this.hrId = value.hrId
            resetChangedOnNotNull()
        }
    }
}
