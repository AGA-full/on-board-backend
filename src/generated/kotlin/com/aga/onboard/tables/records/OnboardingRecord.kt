/*
 * This file is generated by jOOQ.
 */
package com.aga.onboard.tables.records


import com.aga.onboard.tables.Onboarding

import java.util.UUID

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class OnboardingRecord() : UpdatableRecordImpl<OnboardingRecord>(Onboarding.ONBOARDING), Record4<UUID?, String?, String?, UUID?> {

    open var id: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var title: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var notionPageId: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var companyId: UUID?
        set(value): Unit = set(3, value)
        get(): UUID? = get(3) as UUID?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<UUID?, String?, String?, UUID?> = super.fieldsRow() as Row4<UUID?, String?, String?, UUID?>
    override fun valuesRow(): Row4<UUID?, String?, String?, UUID?> = super.valuesRow() as Row4<UUID?, String?, String?, UUID?>
    override fun field1(): Field<UUID?> = Onboarding.ONBOARDING.ID
    override fun field2(): Field<String?> = Onboarding.ONBOARDING.TITLE
    override fun field3(): Field<String?> = Onboarding.ONBOARDING.NOTION_PAGE_ID
    override fun field4(): Field<UUID?> = Onboarding.ONBOARDING.COMPANY_ID
    override fun component1(): UUID? = id
    override fun component2(): String? = title
    override fun component3(): String? = notionPageId
    override fun component4(): UUID? = companyId
    override fun value1(): UUID? = id
    override fun value2(): String? = title
    override fun value3(): String? = notionPageId
    override fun value4(): UUID? = companyId

    override fun value1(value: UUID?): OnboardingRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): OnboardingRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): OnboardingRecord {
        set(2, value)
        return this
    }

    override fun value4(value: UUID?): OnboardingRecord {
        set(3, value)
        return this
    }

    override fun values(value1: UUID?, value2: String?, value3: String?, value4: UUID?): OnboardingRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised OnboardingRecord
     */
    constructor(id: UUID? = null, title: String? = null, notionPageId: String? = null, companyId: UUID? = null): this() {
        this.id = id
        this.title = title
        this.notionPageId = notionPageId
        this.companyId = companyId
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised OnboardingRecord
     */
    constructor(value: com.aga.onboard.tables.pojos.Onboarding?): this() {
        if (value != null) {
            this.id = value.id
            this.title = value.title
            this.notionPageId = value.notionPageId
            this.companyId = value.companyId
            resetChangedOnNotNull()
        }
    }
}
